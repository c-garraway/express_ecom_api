openapi: 3.0.3
info:
  title: Ecom Order API
  version: 1.0.0
  description: Ecom API portfolio project
paths:
  /users/login:
    summary: User login path
    description: This path is used to log the user into the application
    post:
      summary: User login
      description: Log user into application session
      operationId: login
      requestBody:
        description: Sample request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Sample valid response body
          content:
            application/json:
              examples:
                login:
                  value: |-
                    {
                      "user": {
                        "id": 19,
                        "first_name": "Tony",
                        "last_name": "Balony",
                        "email_address": "tonyb@email.com",
                        "created_at": "2022-10-11T15:49:42.000Z"
                      }
                    }
        '400':
          description: Sample bad request response body
          content:
            application/json:
              examples:
                General request error:
                  value:
                    message: Bad request
        '401':
          description: Sample invalid credentials response body
          content:
            application/json:
              examples:
                Invalid credentials:
                  value: |-
                    {
                      "message": "Invalid credentials"
                    }
        default:
          description: Default error sample response
      tags:
        - Users
  /users/logout:
    summary: User logout path
    description: This path is used to log the user out of applicaion
    post:
      summary: User logout
      description: This path logs the user out of active session
      operationId: logout
      responses:
        '200':
          description: Successful logout response body
          content:
            application/json:
              examples:
                logout:
                  value: |-
                    {
                      "message": "logged out"
                    }
        '500':
          description: Sample server error response body
          content:
            application/json:
              examples:
                Internal Server Error:
                  value:
                    message: Internal Server Error
      tags:
        - Users
  /users/fetchuser:
    summary: User fetch path
    description: This path pulls the current user information from the application
    post:
      summary: Fetch active user
      description: This path fetches existing application user
      operationId: fetchuser
      responses:
        '200':
          description: Successful fetchuser response body
          content:
            application/json:
              examples:
                fetchuser:
                  value: |-
                    {
                      "user": {
                        "id": 19,
                        "first_name": "Tony",
                        "last_name": "Balony",
                        "email_address": "tonyb@email.com",
                        "created_at": "2022-10-11T15:49:42.000Z"
                      }
                    }
        '403':
          description: Unauthorized fetch user response body
          content:
            application/json:
              examples:
                fetchuser without authorization:
                  value: |-
                    {
                      "msg": "You're not authorized to view this page"
                    }
        '500':
          description: Sample server error response body
          content:
            application/json:
              examples:
                Internal Server Error:
                  value:
                    message: Internal Server Error
      tags:
        - Users
  /users/register:
    summary: User registration path
    description: This path is used to register a new user into the application
    post:
      summary: Register new user
      description: This path registers a new user into the application database
      operationId: registeruser
      requestBody:
        description: Sample request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '200':
          description: Sample successful registerUser response body
          content:
            application/json:
              examples:
                registerUser:
                  value: |-
                    {
                      "user": {
                        "id": 19,
                        "first_name": "Tony",
                        "last_name": "Balony",
                        "email_address": "tonyb@email.com",
                        "created_at": "2022-10-11T15:49:42.000Z"
                      }
                    }
        '400':
          description: Sample bad request response body
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    message: Bad request
        '403':
          description: Sample response body for duplicate user registration
          content:
            application/json:
              examples:
                registering user already exists:
                  value: |-
                    {
                      "message": "Key (email_address)=(tonyb@email.com) already exists."
                    }
        default:
          description: Default error sample response
      tags:
        - Users
  /products:
    summary: Products path
    description: This path handles get and post functions
    get:
      summary: Gets products from db
      description: This operation will get all products from the application database
      operationId: getAllProducts
      responses:
        default:
          description: Default error sample response
      tags:
        - Products
    post:
      summary: Add new product information
      description: >-
        This operation will update all product details on the application
        database
      operationId: add product
      responses:
        default:
          description: Default error sample response
      tags:
        - Products
  /products/:id:
    summary: Handles individual product requests
    description: This path is used to get, put and delete individual products
    get:
      summary: Get product information
      description: >-
        This operation gets all information on an individual product from
        application database
      operationId: 'get single product '
      responses:
        default:
          description: Default error sample response
      tags:
        - Products
    put:
      summary: Update product
      description: This operation will update detail information of an existing product
      operationId: update product
      responses:
        default:
          description: Default error sample response
      tags:
        - Products
    delete:
      summary: Delete product
      description: This operation will delete all information for a single product
      operationId: Delete product
      responses:
        default:
          description: Default error sample response
      tags:
        - Products
  /carts:
    summary: Handles cart interactions
    description: This path handles CRUD operations on the cart table
    get:
      summary: Get carts information
      description: Get information from all carts
      operationId: Get carts information
      responses:
        default:
          description: Default error sample response
      tags:
        - Carts
    post:
      summary: Create cart
      description: Create cart item in application database
      operationId: Create cart
      responses:
        default:
          description: Default error sample response
      tags:
        - Carts
  /carts/:id:
    summary: Handles individual cart operations
    description: This path will handle cart get, put and delete on individual item
    get:
      summary: Get cart
      description: This operation will get information on an individual cart item
      operationId: Get single cart
      responses:
        default:
          description: Default error sample response
      tags:
        - Carts
    put:
      summary: Update cart information
      description: This operation will update information for a cart item
      operationId: Update cart
      responses:
        default:
          description: Default error sample response
      tags:
        - Carts
    delete:
      summary: Delete cart information
      description: This operation will delete a cart item
      operationId: Delete cart
      responses:
        default:
          description: Default error sample response
      tags:
        - Carts
  /cartitems:
    summary: Handles cart item operations
    description: This path will handle cart items get and post operations
    get:
      summary: Get cart items
      description: This operation will get all cart items
      operationId: Get cart items
      responses:
        default:
          description: Default error sample response
      tags:
        - Cart Items
    post:
      summary: Create new cart item
      description: This operation creates a new cart item in application db
      operationId: Create cart item
      responses:
        default:
          description: Default error sample response
      tags:
        - Cart Items
  /cartitems/:id:
    summary: Handles individual cart item operations
    description: This path will handle get, put and delete on individual cart items
    get:
      summary: Get cart item
      description: Gets an individual cart item
      operationId: Get cart item
      responses:
        default:
          description: Default error sample response
      tags:
        - Cart Items
    put:
      summary: Update cart item
      description: Updates an individual cart item
      operationId: Update cart item
      responses:
        default:
          description: Default error sample response
      tags:
        - Cart Items
    delete:
      summary: Delete cart item
      description: Deletes an individual cart item
      operationId: Delete cart item
      responses:
        default:
          description: Default error sample response
      tags:
        - Cart Items
  /orders:
    summary: Handles order operations
    description: Handles get and post order operations
    get:
      summary: Get all orders
      description: Gets all orders listed in the application
      operationId: Get orders
      responses:
        default:
          description: Default error sample response
      tags:
        - Orders
    post:
      summary: Create order
      description: Create an order in the database
      operationId: Create order
      responses:
        default:
          description: Default error sample response
      tags:
        - Orders
  /orders/:id:
    summary: Handles operations on individual order items
    description: Handles get, put and delete operations on individual order items
    get:
      summary: Get order
      description: Gets an individual order
      operationId: Get order
      responses:
        default:
          description: Default error sample response
      tags:
        - Orders
    put:
      summary: Update order
      description: Updates an existing order
      operationId: Update order
      responses:
        default:
          description: Default error sample response
      tags:
        - Orders
    delete:
      summary: Delete order
      description: Deletes an order from database
      operationId: Delete order
      responses:
        default:
          description: Default error sample response
      tags:
        - Orders
  /orderitems:
    summary: Handles orderitems operations
    description: Handles get and post orderitems operations
    get:
      summary: Get order items
      description: Gets all order items in database
      operationId: Get order items
      responses:
        default:
          description: Default error sample response
      tags:
        - Order Items
    post:
      summary: Create order items
      description: Adds new order item to database
      operationId: Create order items
      responses:
        default:
          description: Default error sample response
      tags:
        - Order Items
  /orderitems/:id:
    summary: Handles individual orderitems operations
    description: Handles get, put and delete orderitems operations
    get:
      summary: Get order item
      description: Gets an individual order item from database
      operationId: Get order item
      responses:
        default:
          description: Default error sample response
      tags:
        - Order Items
    put:
      summary: Update order item
      description: Updates existing order item
      operationId: Update order item
      responses:
        default:
          description: Default error sample response
      tags:
        - Order Items
    delete:
      summary: Delete order item
      description: Deletes individual order item
      operationId: Delete order item
      responses:
        default:
          description: Default error sample response
      tags:
        - Order Items
components:
  schemas:
    Login:
      type: object
      properties:
        email_address:
          type: string
        password:
          type: string
      xml:
        name: Login
    Register:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email_address:
          type: string
        password:
          type: string
      xml:
        name: Login
